#!/usr/bin/env python

def fix_url(url):
    url = url.replace('%7C', '|')  # some clients % encode the '|' but we need it to split
    Log(url)
    return [s.split('|') for s in url.split('livestreamer://')[-1].split('||')[1:]]

def MetadataObjectForURL(url):

    slist = url.split('livestreamer://')[-1].split('||')
    summary = '\n\n'.join([', '.join(s.split('|')) for s in slist[1:]])
    title, thumb, art = Regex(r'^title\=(.+)\,thumb\=(.*)\,art\=(.*)$').search(slist[0]).groups()
    return VideoClipObject(
        title=title if title else u'%s' % url,
        summary=u'%s' % summary,
        thumb=thumb if thumb else None,
        art=art if art else None
        )

def MediaObjectsForURL(url):
    fmt_dict = {
        'ultra': '1080', 'high': '720', 'medium': '480', 'mid': '480',
        'low': '320', 'mobile': '240'
        }
    mo = list()
    for stream_type, quality, stream_url in reversed(sorted(fix_url(url), key=lambda tup: tup[1])):
        if Regex(r'(audio|best|worst)').search(quality):
            continue
        rq = Regex(r'^(\d+)p').search(quality)
        if stream_type == "HLSStream":
            mo.append(MediaObject(
                protocol='hls',
                container='mpegts',
                video_resolution=rq.group(1) if rq else (fmt_dict.get(quality, 'sd')),
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True,
                parts=[PartObject(key=Callback(PlayHLS, url=stream_url, ext='m3u8'))]
                ))
        elif stream_type == "HTTPStream":
            mo.append(MediaObject(
                container=Container.MP4,
                video_resolution=rq.group(1) if rq else (fmt_dict.get(quality, 'sd')),
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True,
                parts=[PartObject(key=Callback(PlayHTTPStream, url=stream_url))]
                ))
    if not mo:
        raise Ex.MediaNotAvailable
    return mo

@indirect
def PlayHLS(url, **kwargs):
    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))

@indirect
def PlayHTTPStream(url, **kwargs):
    return IndirectResponse(VideoClipObject, key=url)
